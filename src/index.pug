doctype html
html(lang="en")
  head
    title An introduction to webpack
  body
    .reveal
      .slides
        section
          h2 An introduction to
          p
            img(src=require("./assets/wp-logo-text.svg"))
          p
            i by Fabian Ihl
        section
          section
            h2 What is webpack not?
            p.fragment Webpack is NOT a task runner
            p.fragment.horizontal-flex
              img(src=require("./assets/wp-logo.svg"))
              b(style="font-size: 3em") &ne;
              img(src=require("./assets/gulp-grunt.png"))
            p.fragment Will it replace my task runner?
          section
            p Maybe...
        section
          section
            h2 What is webpack?
            blockquote.fragment "Webpack is a module bundler for modern JavaScript applications"
          section
            img(src=require("./assets/what-is-webpack.svg"))
            i (webpack.github.io)
          section
            p It will resolve any kind of dependency ...
            ul.fragment
              li Scripts
              li Templates
              li Stylesheets
              li Assets
              li Fonts
              li fragment ...
            p.fragment and bundle them into a final build
          section
            p It will transpile / process
            ul.fragment
              li TypeScript
              li CoffeeScript
              li ES6
              li Less
              li Sass
              li Stylus
              li Pug (fka. Jade)
              li ...
          section
            p And do a lot more ...
        section
          h2 Wait!
          p.fragment What is a module?
          p.fragment How do I declare dependencies?
        section
          section
            h3 A short detour about Modules
            p.fragment Supported are CommonJS, AMD and ES2015 imports
          section
            h2 CommonJS
          section
            h3 Referencing a module
            pre.fragment
              code.javascript.
                var SomeModule = require('./some-module.js');
                SomeModule.doAwesomeStuff();

            p.fragment.current-only(data-code-focus="1") "require" the module
            p.fragment.current-only(data-code-focus="2") Use it
          section
            h3 Defining a module
            pre.fragment
              code.javascript.
                module.exports = {
                  doAwesomeStuff: function() {...}
                }
          section
            h3 limiting access
            pre.fragment
              code.javascript.
                function somePrivateMethod() {...}

                function doAwesomeStuff() {...}

                module.exports =  {
                  doAwesomeStuff: doAwesomeStuff
                }

            p.fragment.current-only(data-code-focus="1") not exported
            p.fragment.current-only(data-code-focus="3-7") exported
          section
            h3 Use closures and be strict!
            pre.fragment
              code.javascript.
                (function() {
                  'use strict';

                  module.exports = {
                    doAwesomeStuff: function() {...}
                  }

                })();
          section
            h2 ES2015 module import
          section
            h3 Importing
            pre.fragment
              code.javascript.
                import {myMember} from 'my-module';

                import {foo, bar} from 'my-module';

                import {longModuleMemberName as shortName} from 'my-module';

            p.fragment.current-only(data-code-focus="1") Import one member
            p.fragment.current-only(data-code-focus="3") Import multiple members
            p.fragment.current-only(data-code-focus="5") Use aliases
          section
            h3 Defining a module
            pre.fragment
              code.javascript.
                function somePrivateMethod() {...}

                export function doAwesomeStuff() {...}
            p.fragment
              a(href="https://developer.mozilla.org//en-US/docs/Web/JavaScript/Reference/Statements/import") See official documentation
        section
          section
            h2 Require other stuff
            h4 in javascript files
            pre.fragment
              code.javascript.
                var data = require('someData.json');
            p.fragment Will load the json data and convert them to an object.
            pre.fragment
              code.javascript.
                var template = require('template.html');
            p.fragment Will return the template as string or template funtion
            pre.fragment
              code.javascript.
                require('prettyStyles.css');
            p.fragment
              = 'Will inject the css as style block into the <head> section'
          section
            p Such files will usualy be bundled into the corresponding js bundle saving additional http requests.
          section
            h4 Require in css files
            pre.fragment
              code.css.
                .button-delete {
                  backgroundimage: url('./assets/deleteIcon.png');
                }

            p.fragment Will...
              ul
                li.fragment Discover the png file
                li.fragment Copy it into the dist folder using a hash as name
                li.fragment Replace the url() with the calculated hash
          section
            h4 The same works in templates
            pre.fragment
              code
                = '<img src=require("./assets/someImage.png")/>'
          section
            b: = '< imagine funny gif here />'
        section
          h2 Minimal configuration
          i (webpack.config.js)
          pre.fragment
            code.javascript.
              const path = require('path');

              module.exports = {
                entry: './app/index.js',
                output: {
                  filename: 'bundle[chunkhash].js',
                  path: path.resolve(__dirname, 'dist'),
                },
              };

          p.fragment.current-only(data-code-focus="3") (Yes, it's a module, too)
          p.fragment.current-only(data-code-focus="4") Your main script file as entry point.
          p.fragment.current-only(data-code-focus="5-8") Output config
          p.fragment.current-only(data-code-focus="6") Name of your final js bundle, with cache busting enabled
          p.fragment.current-only(data-code-focus="7") Output folder
        section
          h3 Handling non js files using loaders
          pre.fragment
            code.javascript.
              const path = require('path');

              module.exports = {
                entry: './app/index.js',
                output: {
                  filename: 'bundle[chunkhash].js',
                  path: path.resolve(__dirname, 'dist'),
                },
                module: {
                  rules: [
                    {test: /\.(jpe?g|png|gif|svg)$/i, use: ['file-loader']},
                    {test: /\.css$/, use: ['style-loader', 'css-loader']},
                  ],
                },
              };
          p.fragment.current-only(data-code-focus="9-14") Loaders are defined in the module section, they tell webpack how to recognize and handle files.
          p.fragment.current-only(data-code-focus="11") Handling assets using the file-loader.
          p.fragment.current-only(data-code-focus="12") Loaders can be chained.
          p.fragment There are loaders for almost everything out there.
        section
          section
            h2 Special case
            b index.html
            p.fragment Entrypoint will always be a js file.
            p.fragment How do we tell wepack to handle our index template?
          section
            b HtmlWebpackPlugin to the rescue
            pre.fragment
              code.javascript.
                var HtmlWebpackPlugin = require('html-webpack-plugin');

                module.exports = {
                  entry: '/src/entry.js',
                  output: {
                    path: './build/',
                    filename: '[name]-[hash].js'
                  },
                  plugins: [
                    new HtmlWebpackPlugin({ template: './src/index.html', }),
                  ]
                };
            p.fragment.current-only(data-code-focus="1") Require the plugin
            p.fragment.current-only(data-code-focus="9-11") Plugin section
            p.fragment(data-code-focus="10") HtmlWebpackPlugin will ...
            ul.fragment
              li Copy index.html into the output folder
              li Inject all bundles as script tags
        section
          h2 Running webpack
          h3.fragment Build
          pre.fragment
            code.shell $ webpack
          p.fragment Will look for webpack.config.js and build your app as configured
          h3.fragment Development
          pre.fragment
            code.shell $ webpack-dev-server
          p.fragment Will look for webpack.config.js and launch a dev server with auto reload
        section
          section
            h2 Chunks
            p Splitting bundles
            pre.fragment
              code.javascript.
                var webpack = require('webpack');

                module.exports = {
                  entry: {
                    'app': './src/app.js',
                    'vendor': './src/vendor.js',
                  },
                  output: {
                    path: './build/',
                    filename: '[name]-[hash].js'
                  },
                  module: {...},
                  plugins: [
                    new webpack.optimize.CommonsChunkPlugin({
                      filename: "[name]-[hash].js",
                      name: "common"
                    }),
                  ]
                };
            p.fragment.current-only(data-code-focus="4-7") Define multiple entry points
            p.fragment.current-only(data-code-focus="14-17") Use the CommonsChunkPlugin to build a chunk with common code
          section
            p This will create:
            ul.fragment
              li index.html
              li common-00d6787913610ea5ba02.js
              li vendor-00d6787913610ea5ba02.js
              li app-00d6787913610ea5ba02.js
        section
          h2 Linting
          pre.fragment
            code.javascript.
              module.exports = {
                entry: './src/entry.js',
                output: {...},
                module: {
                  preLoaders: [
                    {
                      test: /\.js$/,
                      exclude: /node_modules/,
                      loader: 'jscs-loader'
                    }, {
                      test: /\.js$/,
                      exclude: /node_modules/,
                      loader: 'jshint-loader'
                    }
                  ],
                  loaders: [...]
                }
              };
          p.fragment.current-only(data-code-focus="5-15") Pre loaders get executen before loaders
          p.fragment.current-only(data-code-focus="6-10") Enable jscs
          p.fragment.current-only(data-code-focus="10-15") Enable jshint
        section
          h2 Testing
          .fragment
            p Have a look at karma-webpack
            p
              a(href="https://github.com/webpack/karma-webpack") https://github.com/webpack/karma-webpack
        section
          section
            h2 Full sample
            p For a full sample have a look at the config of this presentation:
          section
            i (webpack.config.js)
            pre
              code
                include ../webpack.config.js
          section
            i (webpack.production.js)
            pre
              code
                include ../webpack.production.js
        section
          h1 Thank you
        section
          h1 Questions ?
          hr
          p View this presentation at:
          p: a(href="http://akuryou.github.io/introduction-to-webpack") akuryou.github.io/introduction-to-webpack
          p Clone it, fork it at:
          p: a(href="https://github.com/akuryou/introduction-to-webpack") github.com/akuryou/introduction-to-webpack
